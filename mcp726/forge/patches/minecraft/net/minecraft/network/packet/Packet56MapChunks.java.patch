--- ../src_base/minecraft/net/minecraft/network/packet/Packet56MapChunks.java
+++ ../src_work/minecraft/net/minecraft/network/packet/Packet56MapChunks.java
@@ -6,6 +6,7 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.util.List;
+import java.util.concurrent.Semaphore;
 import java.util.zip.DataFormatException;
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
@@ -26,6 +27,9 @@
     private int dataLength;
     private boolean field_92024_h;
     private static byte[] chunkDataNotCompressed = new byte[0];
+    private int maxLen = 0;
+
+    private Semaphore deflateGate;
 
     public Packet56MapChunks() {}
 
@@ -44,15 +48,6 @@
         {
             Chunk var5 = (Chunk)par1List.get(var4);
             Packet51MapChunkData var6 = Packet51MapChunk.getMapChunkData(var5, true, 65535);
-
-            if (chunkDataNotCompressed.length < var3 + var6.compressedData.length)
-            {
-                byte[] var7 = new byte[var3 + var6.compressedData.length];
-                System.arraycopy(chunkDataNotCompressed, 0, var7, 0, chunkDataNotCompressed.length);
-                chunkDataNotCompressed = var7;
-            }
-
-            System.arraycopy(var6.compressedData, 0, chunkDataNotCompressed, var3, var6.compressedData.length);
             var3 += var6.compressedData.length;
             this.chunkPostX[var4] = var5.xPosition;
             this.chunkPosZ[var4] = var5.zPosition;
@@ -60,15 +55,29 @@
             this.field_73588_b[var4] = var6.chunkHasAddSectionFlag;
             this.field_73584_f[var4] = var6.compressedData;
         }
+        deflateGate = new Semaphore(1);
+        maxLen = var3;
+    }
+
+    private void deflate()
+    {
+        byte[] data = new byte[maxLen];
+        int offset = 0;
+        for (int x = 0; x < field_73584_f.length; x++)
+        {
+            System.arraycopy(field_73584_f[x], 0, data, offset, field_73584_f[x].length);
+            offset += field_73584_f[x].length;
+        }
 
         Deflater var11 = new Deflater(-1);
 
         try
         {
-            var11.setInput(chunkDataNotCompressed, 0, var3);
+            var11.setInput(data, 0, maxLen);
             var11.finish();
-            this.chunkDataBuffer = new byte[var3];
-            this.dataLength = var11.deflate(this.chunkDataBuffer);
+            byte[] deflated = new byte[maxLen];
+            this.dataLength = var11.deflate(deflated);
+            this.chunkDataBuffer = deflated;
         }
         finally
         {
@@ -150,6 +159,16 @@
      */
     public void writePacketData(DataOutputStream par1DataOutputStream) throws IOException
     {
+        if (this.chunkDataBuffer == null)
+        {
+            deflateGate.acquireUninterruptibly();
+            if (this.chunkDataBuffer == null)
+            {
+                deflate();
+            }
+            deflateGate.release();
+        }
+
         par1DataOutputStream.writeShort(this.chunkPostX.length);
         par1DataOutputStream.writeInt(this.dataLength);
         par1DataOutputStream.writeBoolean(this.field_92024_h);

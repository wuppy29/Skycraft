--- ../src_base/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
+++ ../src_work/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
@@ -9,6 +9,7 @@
 import java.util.List;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.IMerchant;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerBeacon;
@@ -74,6 +75,11 @@
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.entity.player.PlayerDropsEvent;
+import net.minecraftforge.event.world.ChunkWatchEvent;
+
 public class EntityPlayerMP extends EntityPlayer implements ICrafting
 {
     private StringTranslate translator = new StringTranslate("en_US");
@@ -145,18 +151,10 @@
         par4ItemInWorldManager.thisPlayerMP = this;
         this.theItemInWorldManager = par4ItemInWorldManager;
         this.renderDistance = par1MinecraftServer.getConfigurationManager().getViewDistance();
-        ChunkCoordinates var5 = par2World.getSpawnPoint();
+        ChunkCoordinates var5 = par2World.provider.getRandomizedSpawnPoint();
         int var6 = var5.posX;
         int var7 = var5.posZ;
         int var8 = var5.posY;
-
-        if (!par2World.provider.hasNoSky && par2World.getWorldInfo().getGameType() != EnumGameType.ADVENTURE)
-        {
-            int var9 = Math.max(5, par1MinecraftServer.getSpawnProtectionSize() - 6);
-            var6 += this.rand.nextInt(var9 * 2) - var9;
-            var7 += this.rand.nextInt(var9 * 2) - var9;
-            var8 = par2World.getTopSolidOrLiquidBlock(var6, var7);
-        }
 
         this.setLocationAndAngles((double)var6 + 0.5D, (double)var8, (double)var7 + 0.5D, 0.0F, 0.0F);
         this.mcServer = par1MinecraftServer;
@@ -253,7 +251,10 @@
                 if (var9 != null && this.worldObj.blockExists(var9.chunkXPos << 4, 0, var9.chunkZPos << 4))
                 {
                     var6.add(this.worldObj.getChunkFromChunkCoords(var9.chunkXPos, var9.chunkZPos));
-                    var8.addAll(((WorldServer)this.worldObj).getAllTileEntityInBox(var9.chunkXPos * 16, 0, var9.chunkZPos * 16, var9.chunkXPos * 16 + 16, 256, var9.chunkZPos * 16 + 16));
+                    //BugFix: 16 makes it load an extra chunk, which isn't associated with a player, which makes it not unload unless a player walks near it.
+                    //ToDo: Find a way to efficiently clean abandoned chunks.
+                    //var8.addAll(((WorldServer)this.worldObj).getAllTileEntityInBox(var9.chunkXPos * 16, 0, var9.chunkZPos * 16, var9.chunkXPos * 16 + 16, 256, var9.chunkZPos * 16 + 16));
+                    var8.addAll(((WorldServer)this.worldObj).getAllTileEntityInBox(var9.chunkXPos * 16, 0, var9.chunkZPos * 16, var9.chunkXPos * 16 + 15, 256, var9.chunkZPos * 16 + 15));
                 }
             }
 
@@ -274,6 +275,7 @@
                 {
                     Chunk var10 = (Chunk)var11.next();
                     this.getServerForPlayer().getEntityTracker().func_85172_a(this, var10);
+                    MinecraftForge.EVENT_BUS.post(new ChunkWatchEvent.Watch(var10.getChunkCoordIntPair(), this));
                 }
             }
         }
@@ -318,11 +320,29 @@
      */
     public void onDeath(DamageSource par1DamageSource)
     {
+        if (ForgeHooks.onLivingDeath(this, par1DamageSource))
+        {
+            return;
+        }
+
         this.mcServer.getConfigurationManager().func_92027_k(par1DamageSource.getDeathMessage(this));
 
         if (!this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory"))
         {
+            captureDrops = true;
+            capturedDrops.clear();
+
             this.inventory.dropAllItems();
+
+            captureDrops = false;
+            PlayerDropsEvent event = new PlayerDropsEvent(this, par1DamageSource, capturedDrops, recentlyHit > 0);
+            if (!MinecraftForge.EVENT_BUS.post(event))
+            {
+                for (EntityItem item : capturedDrops)
+                {
+                    joinEntityItemWithWorld(item);
+                }
+            }
         }
     }
 
